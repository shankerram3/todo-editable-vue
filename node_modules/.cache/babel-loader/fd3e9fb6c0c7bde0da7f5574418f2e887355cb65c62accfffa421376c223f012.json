{"ast":null,"code":"import { vModelText as _vModelText, createElementVNode as _createElementVNode, withDirectives as _withDirectives, vShow as _vShow, toDisplayString as _toDisplayString, createTextVNode as _createTextVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, vModelCheckbox as _vModelCheckbox, createCommentVNode as _createCommentVNode } from \"vue\";\nconst _hoisted_1 = {\n  class: \"overlay\"\n};\nconst _hoisted_2 = {\n  class: \"modal\"\n};\nconst _hoisted_3 = {\n  class: \"container\"\n};\nconst _hoisted_4 = /*#__PURE__*/_createElementVNode(\"h2\", null, \"TODO LIST\", -1 /* HOISTED */);\nconst _hoisted_5 = /*#__PURE__*/_createElementVNode(\"h3\", null, \"Add Item\", -1 /* HOISTED */);\nconst _hoisted_6 = /*#__PURE__*/_createElementVNode(\"h3\", null, \"Todo\", -1 /* HOISTED */);\nconst _hoisted_7 = [\"id\"];\nconst _hoisted_8 = [\"onUpdate:modelValue\", \"onChange\", \"checked\"];\nconst _hoisted_9 = {\n  key: 0\n};\nconst _hoisted_10 = [\"onClick\"];\nconst _hoisted_11 = [\"onClick\"];\nconst _hoisted_12 = /*#__PURE__*/_createElementVNode(\"h3\", null, \"Completed\", -1 /* HOISTED */);\nconst _hoisted_13 = [\"id\"];\nconst _hoisted_14 = [\"onUpdate:modelValue\", \"onChange\", \"checked\"];\nconst _hoisted_15 = {\n  key: 0\n};\nconst _hoisted_16 = [\"onClick\"];\nconst _hoisted_17 = [\"onClick\"];\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"body\", null, [_withDirectives(_createElementVNode(\"div\", _hoisted_1, [_createElementVNode(\"div\", _hoisted_2, [_withDirectives(_createElementVNode(\"textarea\", {\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => $setup.newTask = $event),\n    name: \"edited-note\",\n    id: \"note\",\n    cols: \"10\",\n    rows: \"5\"\n  }, null, 512 /* NEED_PATCH */), [[_vModelText, $setup.newTask]]), _createElementVNode(\"button\", {\n    onClick: $setup.addTasks\n  }, \"Add Note\"), _createElementVNode(\"button\", {\n    class: \"close\",\n    onClick: _cache[1] || (_cache[1] = $event => $setup.showModal = false)\n  }, \"Close\")])], 512 /* NEED_PATCH */), [[_vShow, $setup.showModal]]), _createElementVNode(\"div\", _hoisted_3, [_hoisted_4, _hoisted_5, _createElementVNode(\"p\", null, [_withDirectives(_createElementVNode(\"input\", {\n    \"onUpdate:modelValue\": _cache[2] || (_cache[2] = $event => $setup.newTask = $event),\n    id: \"new-task\",\n    type: \"text\"\n  }, null, 512 /* NEED_PATCH */), [[_vModelText, $setup.newTask]]), _createTextVNode(_toDisplayString($setup.newTask.text), 1 /* TEXT */), _createElementVNode(\"button\", {\n    onClick: $setup.addTasks\n  }, \"Add\")]), _hoisted_6, (_openBlock(true), _createElementBlock(_Fragment, null, _renderList($setup.incompleteTasks, (task, index) => {\n    return _openBlock(), _createElementBlock(\"ul\", {\n      key: index,\n      id: task.isChecked ? 'completed-tasks' : 'incomplete-tasks'\n    }, [_createElementVNode(\"li\", null, [_withDirectives(_createElementVNode(\"input\", {\n      type: \"checkbox\",\n      \"onUpdate:modelValue\": $event => task.isChecked = $event,\n      onChange: $event => ($setup.handleCheckuncompleted(index), $setup.addToCompletedList(index)),\n      checked: task.isChecked\n    }, null, 40 /* PROPS, HYDRATE_EVENTS */, _hoisted_8), [[_vModelCheckbox, task.isChecked]]), $setup.editable != true ? (_openBlock(), _createElementBlock(\"label\", _hoisted_9, _toDisplayString(task.text), 1 /* TEXT */)) : _createCommentVNode(\"v-if\", true), _createElementVNode(\"p\", null, [$setup.editable ? _withDirectives((_openBlock(), _createElementBlock(\"input\", {\n      key: 0,\n      \"onUpdate:modelValue\": _cache[3] || (_cache[3] = $event => $setup.newTask = $event),\n      id: \"new-task\",\n      type: \"text\"\n    }, null, 512 /* NEED_PATCH */)), [[_vModelText, $setup.newTask]]) : _createCommentVNode(\"v-if\", true), _createTextVNode(_toDisplayString($setup.newTask.text), 1 /* TEXT */)]), _createElementVNode(\"button\", {\n      onClick: $event => $setup.editTask(index),\n      class: \"edit\"\n    }, \"Edit\", 8 /* PROPS */, _hoisted_10), _createElementVNode(\"button\", {\n      onClick: $event => $setup.deleteTask(index),\n      class: \"delete\"\n    }, \"Delete\", 8 /* PROPS */, _hoisted_11)])], 8 /* PROPS */, _hoisted_7);\n  }), 128 /* KEYED_FRAGMENT */)), _hoisted_12, (_openBlock(true), _createElementBlock(_Fragment, null, _renderList($setup.completeTasks, (task, index) => {\n    return _openBlock(), _createElementBlock(\"ul\", {\n      key: index,\n      id: task.isChecked ? 'completed-tasks' : 'incomplete-tasks'\n    }, [_createElementVNode(\"li\", null, [_withDirectives(_createElementVNode(\"input\", {\n      type: \"checkbox\",\n      \"onUpdate:modelValue\": $event => task.isChecked = $event,\n      onChange: $event => ($setup.handleCheckcompleted(index), $setup.addToUncompletedList(index)),\n      checked: task.isChecked\n    }, null, 40 /* PROPS, HYDRATE_EVENTS */, _hoisted_14), [[_vModelCheckbox, task.isChecked]]), $setup.editable != true ? (_openBlock(), _createElementBlock(\"label\", _hoisted_15, _toDisplayString(task.text), 1 /* TEXT */)) : _createCommentVNode(\"v-if\", true), _createElementVNode(\"p\", null, [$setup.editable ? _withDirectives((_openBlock(), _createElementBlock(\"input\", {\n      key: 0,\n      \"onUpdate:modelValue\": _cache[4] || (_cache[4] = $event => $setup.newTask = $event),\n      id: \"new-task\",\n      type: \"text\"\n    }, null, 512 /* NEED_PATCH */)), [[_vModelText, $setup.newTask]]) : _createCommentVNode(\"v-if\", true), _createTextVNode(_toDisplayString($setup.newTask.text), 1 /* TEXT */)]), _createElementVNode(\"button\", {\n      onClick: $event => $setup.editTask(index),\n      class: \"edit\"\n    }, \"Edit\", 8 /* PROPS */, _hoisted_16), _createElementVNode(\"button\", {\n      onClick: $event => $setup.deleteTask(index, task.isChecked),\n      class: \"delete\"\n    }, \" Delete \", 8 /* PROPS */, _hoisted_17)])], 8 /* PROPS */, _hoisted_13);\n  }), 128 /* KEYED_FRAGMENT */))])]);\n}","map":{"version":3,"names":["class","_createElementVNode","_createElementBlock","_hoisted_1","_hoisted_2","$setup","newTask","$event","name","id","cols","rows","onClick","addTasks","_cache","showModal","_hoisted_3","_hoisted_4","_hoisted_5","type","text","_hoisted_6","_Fragment","_renderList","incompleteTasks","task","index","key","isChecked","onChange","handleCheckuncompleted","addToCompletedList","checked","editable","_hoisted_9","_toDisplayString","editTask","_hoisted_10","deleteTask","_hoisted_11","_hoisted_12","completeTasks","handleCheckcompleted","addToUncompletedList","_hoisted_15","_hoisted_16","_hoisted_17"],"sources":["/Users/ram/projects/todo-assignment/notes-app/src/App.vue"],"sourcesContent":["\n<script setup>\nimport { ref } from \"vue\";\n\nconst newTask = ref(\"\");\nconst incompleteTasks = ref([]);\nconst completeTasks = ref([]);\nconst editable = ref(false);\nconst showModal = ref(false);\nconst editIndex = ref(null);\nconst isChecked = ref(false);\n\nconst addTasks = () => {\n  if (newTask.value.length <= 9) {\n    alert(\"character length must be greater than 9\");\n    return;\n  } else {\n    if (editIndex.value === null) {\n      incompleteTasks.value.push({\n        text: newTask.value,\n        isChecked: false,\n      });\n      newTask.value = \"\";\n    } else {\n      incompleteTasks.value[editIndex.value].text = newTask.value;\n      newTask.value = \"\";\n      editIndex.value = null;\n      showModal.value = false;\n    }\n  }\n};\nfunction handleCheckuncompleted(index) {\n  incompleteTasks.value[index].isChecked = !isChecked.value;\n  isChecked.value = !isChecked.value;\n  console.log(incompleteTasks.value[index].isChecked);\n}\nfunction handleCheckcompleted(index) {\n  incompleteTasks.value[index].isChecked = !isChecked.value;\n  isChecked.value = !isChecked.value;\n  console.log(incompleteTasks.value[index].isChecked);\n}\nfunction addToCompletedList(index) {\n  \n    completeTasks.value.push({\n      text: incompleteTasks.value[index].text,\n      isChecked: incompleteTasks.value[index].isChecked,\n    });\n    incompleteTasks.value.splice(index, 1);\n}\nfunction addToUncompletedList(index){\n  incompleteTasks.value.push({\n      text: completeTasks.value[index].text,\n      isChecked: completeTasks.value[index].isChecked,\n    });\n    completeTasks.value.splice(index, 1);\n}\nfunction deleteTask(index) {\n  incompleteTasks.value.splice(index, 1);\n}\nfunction editTask(index) {\n  showModal.value = true;\n  editIndex.value = index;\n}\n</script>\n\n\n<template>\n  <body>\n    <div v-show=\"showModal\" class=\"overlay\">\n      <div class=\"modal\">\n        <textarea\n          v-model=\"newTask\"\n          name=\"edited-note\"\n          id=\"note\"\n          cols=\"10\"\n          rows=\"5\"\n        ></textarea>\n        <button @click=\"addTasks\">Add Note</button>\n        <button class=\"close\" @click=\"showModal = false\">Close</button>\n      </div>\n    </div>\n    <div class=\"container\">\n      <h2>TODO LIST</h2>\n      <h3>Add Item</h3>\n      <p>\n        <input v-model=\"newTask\" id=\"new-task\" type=\"text\" />{{ newTask.text\n        }}<button @click=\"addTasks\">Add</button>\n      </p>\n\n      <h3>Todo</h3>\n\n      <ul\n        v-for=\"(task, index) in incompleteTasks\"\n        :key=\"index\"\n        :id=\"task.isChecked ? 'completed-tasks' : 'incomplete-tasks'\"\n      >\n        <li>\n          <input\n            type=\"checkbox\"\n            v-model=\"task.isChecked\"\n            @change=\"handleCheckuncompleted(index), addToCompletedList(index)\"\n            :checked=\"task.isChecked\"\n          />\n          <label v-if=\"editable != true\">{{ task.text }}</label>\n          <p>\n            <input\n              v-if=\"editable\"\n              v-model=\"newTask\"\n              id=\"new-task\"\n              type=\"text\"\n            />{{ newTask.text }}\n          </p>\n          <button @click=\"editTask(index)\" class=\"edit\">Edit</button>\n          <button @click=\"deleteTask(index)\" class=\"delete\">Delete</button>\n        </li>\n      </ul>\n\n      <h3>Completed</h3>\n      <ul\n        v-for=\"(task, index) in completeTasks\"\n        :key=\"index\"\n        :id=\"task.isChecked ? 'completed-tasks' : 'incomplete-tasks'\"\n      >\n        <li>\n          <input\n            type=\"checkbox\"\n            v-model=\"task.isChecked\"\n            @change=\"handleCheckcompleted(index), addToUncompletedList(index)\"\n            :checked=\"task.isChecked\"\n          />\n          <label v-if=\"editable != true\">{{ task.text }}</label>\n          <p>\n            <input\n              v-if=\"editable\"\n              v-model=\"newTask\"\n              id=\"new-task\"\n              type=\"text\"\n            />{{ newTask.text }}\n          </p>\n          <button @click=\"editTask(index)\" class=\"edit\">Edit</button>\n          <button @click=\"deleteTask(index, task.isChecked)\" class=\"delete\">\n            Delete\n          </button>\n        </li>\n      </ul>\n    </div>\n  </body>\n</template>\n<style >\nbody {\n  background: #fff;\n  height: 100vh;\n  margin: 0;\n  color: #333;\n  font-family: Lato, sans-serif;\n  background-color: #e4e4e4;\n}\n\n.container {\n  display: block;\n  width: 400px;\n  margin: 100px auto auto auto;\n  background-color: #fff;\n  padding: 0px 10px 10px 10px;\n  border-radius: 10px;\n}\n\nh2 {\n  text-align: center;\n  padding-top: 10px;\n  margin-bottom: 0px;\n}\n\nul {\n  margin: 0;\n  padding: 0;\n}\n\nli * {\n  float: left;\n}\n\nli,\nh3 {\n  clear: both;\n  list-style: none;\n}\n\ninput,\nbutton {\n  outline: none;\n}\n\nbutton {\n  background: none;\n  border: 0px;\n  color: #888;\n  font-size: 15px;\n  width: 60px;\n  margin: 10px 0 0;\n  font-family: Lato, sans-serif;\n  cursor: pointer;\n}\n\nbutton:hover {\n  color: #333;\n}\n\n/* Heading */\n\nh3,\nlabel[for=\"new-task\"] {\n  color: #333;\n  font-weight: 700;\n  font-size: 15px;\n  border-bottom: 2px solid #333;\n  padding: 20px 0 10px;\n  margin: 0;\n  text-transform: uppercase;\n}\n\ninput[type=\"text\"] {\n  margin: 0;\n  font-size: 18px;\n  line-height: 18px;\n  height: 18px;\n  padding: 10px;\n  border: 1px solid #ddd;\n  background: #fff;\n  border-radius: 6px;\n  font-family: Lato, sans-serif;\n  color: #888;\n}\n\ninput[type=\"text\"]:focus {\n  color: #333;\n}\n\n/* New Task */\n\nlabel[for=\"new-task\"] {\n  display: block;\n  margin: 0 0 20px;\n}\n\ninput#new-task {\n  float: left;\n  width: 318px;\n}\n\np > button:hover {\n  color: #0fc57c;\n}\n\n/* Task list */\n\nli {\n  overflow: hidden;\n  padding: 20px 0;\n  border-bottom: 1px solid #eee;\n}\n\nli > input[type=\"checkbox\"] {\n  margin: 0 10px;\n  position: relative;\n  top: 15px;\n}\n\nli > label {\n  font-size: 18px;\n  line-height: 40px;\n  width: 237px;\n  padding: 0 0 0 11px;\n}\n\nli > input[type=\"text\"] {\n  width: 226px;\n}\n\nli > .delete:hover {\n  color: #cf2323;\n}\n\n/* Completed */\n\n#completed-tasks label {\n  text-decoration: line-through;\n  color: #888;\n}\n\n/* Edit Task */\n\nul li input[type=\"text\"] {\n  display: none;\n}\n\nul li.editMode input[type=\"text\"] {\n  display: block;\n}\n\nul li.editMode label {\n  display: none;\n}\n.modal {\n  width: 750px;\n  background-color: white;\n  border-radius: 10px;\n  padding: 30px;\n  position: relative;\n  display: flex;\n  flex-direction: column;\n}\n.modal button {\n  padding: 10px 20px;\n  font-size: 20px;\n  width: 100%;\n  background-color: #434141;\n  border: none;\n  color: white;\n  cursor: pointer;\n  margin-top: 15px;\n}\n.modal p {\n  margin-left: auto;\n  font-size: 20px;\n  z-index: 100000;\n  cursor: pointer;\n}\ntextarea {\n  width: 100%;\n  height: 200px;\n  padding: 5px;\n  font-size: 20px;\n}\n.overlay {\n  position: absolute;\n  width: 100%;\n  height: 100%;\n  background-color: rgba(0, 0, 0, 0.77);\n  transform: translate(-50%, -50%);\n  top: 50%;\n  left: 50%;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  z-index: 10;\n}\n</style>"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}